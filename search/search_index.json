{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Easy MVC !","text":"<p>Easy MVC is a small and lightweight PHP framework designed to simplify web development following the Model-View-Controller (MVC) architecture. It provides a clean and organized structure for building web applications with ease. Easy MVC is packed with features such as routing, database integration, and way more to come. </p> <p>Note</p> <p>Remember, this project (and this documentation) is still under development. Features will be added as soon as possible. Thank you for your patience !</p> <p>This framework is designed to be a light, easy-to-use, and flexible framework that can be easily integrated into any project, but doesn't include any of the advanced features that Laravel and Symfony have. If you want to build a simple web app and don't need any of the advanced features, Easy MVC is the perfect choice for you !</p> <p>Info</p> <p>If you plan on using this framework to build a very robust and complete web application, maybe you should consider using Laravel or Symfony instead. </p>"},{"location":"controllers/","title":"Under construction !","text":""},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<p>Assuming that you already have a development environment set up with PHP 8.2 or higher and an SQL server, Easy MVC is available as a Composer package, so make sure you have Composer installed on your machine. If not, please follow the Composer installation instructions.</p>"},{"location":"getting-started/#creating-a-new-project","title":"Creating a new project","text":"<p>When your development environment is ready, then you can create a new project. There are several ways to do that, as you can see below.</p> <p>Warning</p> <p>At the moment, the project (therefore the package) is not stable yet (that's why we specified <code>dev-main</code>). Do not use it in production ! If you encounter any problem, please open a GitHub issue.</p>"},{"location":"getting-started/#using-composer","title":"Using Composer","text":"<p>If you want to use Composer to create the project, you can simply create a new project with the Composer <code>create-project</code> command. This command will automatically clone the Easy MVC repository and install all the dependencies. Here's an example :</p> <pre><code>composer create-project vitafeu/easy-mvc:dev-main AwesomeProject\n</code></pre> <p>Replace <code>AwesomeProject</code> with the name of your choice, just navigate to your project directory and you'll be good to go :</p> <pre><code>cd AwesomeProject\n</code></pre>"},{"location":"getting-started/#cloning-the-repository","title":"Cloning the repository","text":"<p>If you don't want to use Composer, you can clone the Easy MVC repository :</p> <pre><code>git clone https://github.com/Vitafeu/easy-mvc.git AwesomeProject\n</code></pre> <p>Replace <code>AwesomeProject</code> with the name of your choice, then navigate to your project directory and install the Composer dependencies :</p> <pre><code>cd AwesomeProject\ncomposer install\n</code></pre>"},{"location":"getting-started/#configuring-the-project","title":"Configuring the project","text":"<p>After creating the project, you'll need to configure it. Navigate to your project directory and copy the <code>.env.example</code> file to <code>.env</code> (you can also create a new .env file if you want) :</p> <pre><code>cp .env.example .env\n</code></pre> <p>This file will be used to define the environment variables, such as the database connection. You can edit it to suit your needs.</p> <p>That's all you need to do to get started !</p>"},{"location":"getting-started/#testing-the-project","title":"Testing the project","text":"<p>You can now test if your project is working as expected. Assuming that you are in the project directory, you can run the following command :</p> <pre><code>php easy serve\n</code></pre> <p>Info</p> <p>Don't worry if you don't know what this command's about, we'll cover it later. For now, just remember that this command will start the development server.</p> <p>This command will start the development server in the <code>public</code> directory (your project's entry point). You can now open your browser and navigate to http://localhost:8080 to test your project.</p> <p>If you see the message \"Welcome from Easy MVC !\", then your project is working as expected ! </p> <p>Failure</p> <p>If you see anything else, please check you've correctly followed the instructions, or search for any hints in the console output.</p> <p>You can now move on to the next section to learn how to use Easy MVC.</p>"},{"location":"models/","title":"Under construction !","text":""},{"location":"references/","title":"Under construction !","text":""},{"location":"routing/","title":"Routing","text":"<p>The first section we will cover is the routing. It's the process of determining which controller and method should be called when a specific URL is requested. Don't worry, we'll cover the controllers in the next section. Just remember that each route is mapped to a specific controller and one of its methods.</p>"},{"location":"routing/#understanding-routes","title":"Understanding routes","text":"<p>If not done already, navigate to your project directory and open your project in your favorite code editor. There, you should find a folder named <code>routes</code>. In this folder, there's a file called <code>web.php</code> that will contain all your application's routes. This file should already contain a route for the index page :</p> <pre><code>$this-&gt;addRoute('GET', '/', 'IndexController', 'home');\n</code></pre> <p>Let break this down a bit :</p> <pre><code>$this-&gt;addRoute();\n</code></pre> <p>This method is used to define a new route, it simply adds the route to the list of all the router's routes. Phew, the word 'route' is used a lot !</p> <p>But what does each parameter mean ? Let's look at them one by one :</p> <ul> <li> <p><code>GET</code> : this first parameter indicates what HTTP method should be used to access the route. In this case, we want to use the GET method to access the route.</p> </li> <li> <p><code>/</code> : this is the URL that should be used to access the route. Let's say that we want to access a hypothetic route listing products, we would use <code>/products</code> as the URL.</p> </li> <li> <p><code>IndexController</code> : this is the name of the controller that should be used to handle the route. In this case, we want to use the <code>IndexController</code> controller to handle the route.</p> </li> <li> <p><code>home</code> : finally, this is the name of the method that should be called when the route is accessed. In this case, we want to call the <code>home</code> method of the <code>IndexController</code> controller.</p> </li> </ul>"},{"location":"routing/#defining-routes","title":"Defining routes","text":"<p>Now that we know how routes work, let's create another one. And why not use our products listing route as an example ?</p> <p>This is what it should look like :</p> <pre><code>$this-&gt;addRoute('GET', '/products', 'ProductController', 'home');\n</code></pre> <p>So, we're using the GET method to access the route, the <code>products</code> URL, the <code>ProductController</code> controller, and the <code>home</code> method. Don't worry about the controller and the method, we'll cover them in the controllers section.</p> <p>Now that our route is defined, check that the local development server is running (if not, run <code>php easy serve</code> in your project directory), then open your browser. Let's go to http://localhost:8080/products and we should see the products listing page.</p> <p>Oh no ! The products listing page is not working as expected. Do you know why ? That's right ! We haven't created the <code>ProductController</code> and <code>home</code> method yet. Let's dive into the controllers section !</p>"},{"location":"using-the-framework/","title":"Prologue","text":"<p>As we have seen, the project you created in the previous section is based on the MVC architecture. In this section, we'll make sure that you start using the framework with a basic knowledge of this architecture. If you already have a basic understanding of it, you can skip this section.</p>"},{"location":"using-the-framework/#what-is-the-mvc-architecture","title":"What is the MVC architecture ?","text":"<p>While we're going through this section, we'll illustrate all those concepts with what a restaurant infrastructure would look like. Let's start !</p> <p>The Model-View-Controller architecture is a design pattern that divides a web application into three main parts :</p> <ol> <li> <p>The model :      This part serves as the backbone of our application, handling all the vital data and rules for its behavior. The model is responsible for managing the data, defining its structure, and enforcing business logic.</p> <p>In our restaurant, the model acts like a master chef in a busy kitchen, orchestrating the ingredients and recipes with precision. Just as the chef ensures that each dish is prepared to perfection, the model ensures that our application's data is organized and manipulated correctly, behind the scenes.</p> </li> <li> <p>The view :     Moving forward, the view is what the users see and interact with, providing a visual representation of the application's data. It's responsible for presenting information in a clear and intuitive manner, enhancing the user experience.</p> <p>In our restaurant, the view is like the inviting dining area of a restaurant, where customers browse the menu and enjoy their meals. Similar to how a well-designed restaurant layout enhances the dining experience, the view ensures that users can navigate our application seamlessly.</p> </li> <li> <p>The controller :     Finally, let's talk about the controller. This component acts as the intermediary between the Model and the View, facilitating communication and user interaction. The controller receives input from the user, processes it, and updates both the model and the view accordingly.</p> <p>In our restaurant, the controller takes on the role of a waiter, taking orders from customers and ensuring they are fulfilled efficiently. Like a waiter orchestrating the dining experience, the controller manages the flow of information, ensuring a smooth and responsive user interface.</p> </li> </ol> <p>By separating the application into these distinct components, we achieve a clearer structure, making it easier to develop, test, and maintain our application. This separation of concerns allows us to focus on each aspect independently, leading to a more robust and scalable application.</p>"},{"location":"using-the-framework/#additional-concepts","title":"Additional concepts","text":"<p>But wait ! How can we access all of these ressources in a web application ? And how can we add layers of verification, like authentication, to control what users can access ?</p> <p>Those concepts are called routes and middlewares. Let's see how they work.</p>"},{"location":"using-the-framework/#routes","title":"Routes","text":"<p>Let's take a look at routes, the pathways that define how users interact with our application. Routes determine the URLs or endpoints that users can access to perform specific actions or access certain resources. They serve as the navigation system within our application, guiding users to their desired destinations.</p>"},{"location":"using-the-framework/#middlewares","title":"Middlewares","text":"<p>Now, let's shift our focus to middlewares, the intermediary layers that intercept and process incoming requests before they reach the main application logic. Middlewares add additional functionality to our application, such as authentication, logging, or error handling, without directly modifying the core functionality. Think of them as gatekeepers, intercepting requests and performing tasks like authentication checks before allowing them to proceed to the main application logic. They provide an extra layer of security and functionality, ensuring that incoming requests are properly validated and processed before being handled by the application.</p>"},{"location":"using-the-framework/#conclusion","title":"Conclusion","text":"<p>That's it for this section ! You've gained a solid understanding of fundamental concepts in the MVC architecture, which will undoubtedly aid you in your journey of web development. If any concept remains unclear, don't hesitate to search for clarification online !</p> <p>In the following sections, we'll learn how to use all of these concepts to build a complete web application, with this framework. We'll create a small project along the way to show you how to use them.</p>"},{"location":"views/","title":"Under construction !","text":""}]}